package test

import (
	"errors"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
	"github.com/vkr-mtuci/allure-service/internal/service"
)

// ‚úÖ **–¢–µ—Å—Ç: –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–ø—É—Å–∫–∞**
func TestGetNextLaunch_Success(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	now := time.Now().UnixMilli()
	mockLaunches := []adapter.Launch{
		{ID: 101, Name: "Older Run", CreatedDate: now - 50000},
		{ID: 102, Name: "Latest Run", CreatedDate: now + 1000}, // –ë–ª–∏–∂–∞–π—à–∏–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	}

	mockClient.On("GetLaunches", mock.Anything).Return(mockLaunches, nil)

	launch, err := service.GetNextLaunch(time.Now()) // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –∞ –Ω–µ -2 —á–∞—Å–∞
	assert.NoError(t, err)
	assert.NotNil(t, launch)
	assert.Equal(t, int64(102), launch.ID) // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–ª–∏–∂–∞–π—à–∏–π
}

// ‚ùå **–¢–µ—Å—Ç: –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤**
func TestGetNextLaunch_NoLaunches(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	mockClient.On("GetLaunches", mock.Anything).Return([]adapter.Launch{}, nil)

	launch, err := service.GetNextLaunch(time.Now().Add(-1 * time.Hour))
	assert.Error(t, err)
	assert.Nil(t, launch)
}

// üö® **–¢–µ—Å—Ç: –û—à–∏–±–∫–∞ API**
func TestGetNextLaunch_APIError(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º **–ø—É—Å—Ç–æ–π** —Å–ª–∞–π—Å `[]adapter.Launch{}` –≤–º–µ—Å—Ç–æ `nil`
	mockClient.On("GetLaunches", mock.Anything).Return([]adapter.Launch{}, errors.New("–æ—à–∏–±–∫–∞ API"))

	launch, err := service.GetNextLaunch(time.Now().Add(-1 * time.Hour))
	assert.Error(t, err)
	assert.Nil(t, launch)
}

// ‚úÖ **–¢–µ—Å—Ç: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞**
func TestGeneratePDFReport_Success(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	mockReport := &adapter.PDFReport{
		ID:          999,
		Name:        "Test Report",
		ProjectID:   1661,
		CreatedDate: time.Now().UnixMilli(),
	}

	mockClient.On("GeneratePDFReport", mock.Anything, int64(123), "Test Run").Return(mockReport, nil)

	report, err := service.GeneratePDFReport(123, "Test Run")
	assert.NoError(t, err)
	assert.NotNil(t, report)
	assert.Equal(t, int64(999), report.ID)
}

// ‚ùå **–¢–µ—Å—Ç: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF**
func TestGeneratePDFReport_Error(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	mockClient.On("GeneratePDFReport", mock.Anything, int64(123), "Test Run").
		Return((*adapter.PDFReport)(nil), errors.New("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"))

	report, err := service.GeneratePDFReport(123, "Test Run")
	assert.Error(t, err)
	assert.Nil(t, report)
}

// ‚úÖ **–¢–µ—Å—Ç: –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF**
func TestDownloadPDFReport_Success(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	pdfContent := []byte("PDF FILE CONTENT")
	fileName := "allure-report-999.pdf"

	mockClient.On("DownloadPDFReport", mock.Anything, "999").Return(pdfContent, fileName, nil)

	data, name, err := service.DownloadPDFReport("999")
	assert.NoError(t, err)
	assert.NotNil(t, data)
	assert.Equal(t, fileName, name)
}

// ‚ùå **–¢–µ—Å—Ç: –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF**
func TestDownloadPDFReport_Error(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	mockClient.On("DownloadPDFReport", mock.Anything, "999").
		Return(([]byte)(nil), "", errors.New("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF")) // ‚úÖ –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ

	data, name, err := service.DownloadPDFReport("999")
	assert.Error(t, err)
	assert.Nil(t, data)
	assert.Equal(t, "", name)
}

func TestGeneratePDFReport_InvalidParameters(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	mockClient.On("GeneratePDFReport", mock.Anything, int64(0), "Test").
		Return(nil, errors.New("invalid launch ID"))

	mockClient.On("GeneratePDFReport", mock.Anything, int64(123), "").
		Return(nil, errors.New("empty launch name"))

	// –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º LaunchID
	_, err := service.GeneratePDFReport(0, "Test")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "invalid launch ID")

	// –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
	_, err = service.GeneratePDFReport(123, "")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "empty launch name")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏
	mockClient.AssertExpectations(t)
}

func TestDownloadPDFReport_EdgeCases(t *testing.T) {
	mockClient := new(MockAllureClient)
	service := service.NewAllureService(mockClient)

	// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Å –ø—É—Å—Ç—ã–º reportID
	mockClient.On("DownloadPDFReport", mock.Anything, "").Return(
		nil, "", errors.New("empty report ID"),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º ID
	mockClient.On("DownloadPDFReport", mock.Anything, "invalid").Return(
		nil, "", errors.New("invalid report ID"),
	)

	// –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º reportID
	_, _, err := service.DownloadPDFReport("")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "empty report ID")

	// –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º ID
	_, _, err = service.DownloadPDFReport("invalid")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "invalid report ID")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
	mockClient.AssertExpectations(t)
}
