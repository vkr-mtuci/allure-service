package test

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/allure-service/config"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
)

// ‚úÖ **–¢–µ—Å—Ç —Å –º–æ–∫–æ–º**
func TestNewAllureClient_WithMock(t *testing.T) {
	cfg := &config.Config{
		AllureBaseURL:   "https://allure.example.com",
		AllureAPIURL:    "/api/",
		AllureUserToken: "test-token",
		AllureProjectID: "1661",
		TokenExpiry:     55 * time.Minute,
	}

	mockClient := new(MockAllureClient)
	client := adapter.NewAllureClient(cfg)

	// üî• **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è**
	assert.NotNil(t, client)

	// üî• **–ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å `Authenticate` —Å `context.TODO()`**
	mockClient.On("Authenticate", mock.Anything).Return(nil)

	// üî• **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ**
	assert.Equal(t, "https://allure.example.com", cfg.AllureBaseURL)
	assert.Equal(t, "/api/", cfg.AllureAPIURL)
	assert.Equal(t, "test-token", cfg.AllureUserToken)
	assert.Equal(t, "1661", cfg.AllureProjectID)

	// üî• **–ü–µ—Ä–µ–¥–∞–µ–º `context.TODO()` –≤–º–µ—Å—Ç–æ `nil`**
	err := mockClient.Authenticate(context.TODO())
	assert.NoError(t, err)
	mockClient.AssertExpectations(t)
}

// ‚úÖ **–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏**
func TestAuthenticate_RealClient(t *testing.T) {
	cfg := &config.Config{
		AllureBaseURL:   "https://allure.example.com",
		AllureAPIURL:    "/api/",
		AllureUserToken: "test-token",
		AllureProjectID: "1661",
		TokenExpiry:     55 * time.Minute,
	}

	client := adapter.NewAllureClient(cfg)

	// üî• **–ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é**
	err := client.Authenticate(context.TODO())

	// ‚ùó **–í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞–Ω–∏–∫–∏**
	assert.NotNil(t, client)
	assert.Error(t, err) // –¢–∞–∫ –∫–∞–∫ API Allure —Ä–µ–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞
func TestAuthenticate_RequestError(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Equal(t, "–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏", err.Error())

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –±—ã–ª**
	mockClient.AssertExpectations(t)
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
func TestAuthenticate_BadJSON(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤**
	mockClient.AssertExpectations(t)
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–µ
func TestAuthenticate_StatusCodeError(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –∫–æ–¥ 500**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å 500"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "–æ—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å 500")

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤**
	mockClient.AssertExpectations(t)
}

// Unit-—Ç–µ—Å—Ç—ã –¥–ª—è AllureClient
func TestGetLaunches_RealClient(t *testing.T) {
	// –§–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —ç–º—É–ª–∏—Ä—É–µ—Ç Allure API
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodPost && r.URL.Path == "/api/uaa/oauth/token" {
			// –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É —Ç–æ–∫–µ–Ω–∞
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			_, _ = w.Write([]byte(`{"access_token": "mocked_token", "expires_in": 3600}`))
			return
		}

		if r.Method == http.MethodGet && strings.HasPrefix(r.URL.Path, "/api/launch") {
			// –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Allure API
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]interface{}{
				"content": []adapter.Launch{
					{ID: 1, Name: "Launch 1", CreatedDate: time.Now().Add(-1 * time.Hour).UnixMilli()},
					{ID: 2, Name: "Launch 2", CreatedDate: time.Now().Add(1 * time.Hour).UnixMilli()},
				},
			})
			return
		}

		// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
		w.WriteHeader(http.StatusNotFound)
	}))
	defer mockServer.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

	// –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –Ω–æ –Ω–∞–ø—Ä–∞–≤–∏–º –µ–≥–æ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
	cfg := &config.Config{
		AllureBaseURL:   mockServer.URL,
		AllureAPIURL:    "/api/",
		AllureUserToken: "fake-token", // –ß—Ç–æ–±—ã `Authenticate` —Ä–∞–±–æ—Ç–∞–ª
	}
	client := adapter.NewAllureClient(cfg)

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π `AllureClient`
	launches, err := client.GetLaunches(context.Background())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫
	assert.NoError(t, err)
	assert.Len(t, launches, 2)
	assert.Equal(t, int64(1), launches[0].ID)
	assert.Equal(t, "Launch 1", launches[0].Name)
}

func TestGeneratePDFReport_RealClient(t *testing.T) {
	// –§–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —ç–º—É–ª–∏—Ä—É–µ—Ç Allure API
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodPost && r.URL.Path == "/api/uaa/oauth/token" {
			// –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É —Ç–æ–∫–µ–Ω–∞
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			_, _ = w.Write([]byte(`{"access_token": "mocked_token", "expires_in": 3600}`))
			return
		}

		if r.Method == http.MethodPost && r.URL.Path == "/api/export/launch/pdf" {
			// –≠–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(adapter.PDFReport{
				ID:     456,
				Name:   "Test Run",
				Type:   "pdf",
				Status: "generated",
			})
			return
		}

		// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
		w.WriteHeader(http.StatusNotFound)
	}))
	defer mockServer.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

	// –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –Ω–æ –Ω–∞–ø—Ä–∞–≤–∏–º –µ–≥–æ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
	cfg := &config.Config{
		AllureBaseURL:   mockServer.URL,
		AllureAPIURL:    "/api/",
		AllureUserToken: "fake-token",
	}
	client := adapter.NewAllureClient(cfg)

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π `AllureClient`
	report, err := client.GeneratePDFReport(context.Background(), 123, "Test Run")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫
	assert.NoError(t, err)
	assert.NotNil(t, report)
	assert.Equal(t, int64(456), report.ID)
	assert.Equal(t, "Test Run", report.Name)
}

func TestGetPDFDownloadLink_RealClient(t *testing.T) {
	// –§–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —ç–º—É–ª–∏—Ä—É–µ—Ç Allure API
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
		if r.Method == http.MethodGet && strings.HasPrefix(r.URL.Path, "/api/export/download/") {
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			return
		}

		// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
		w.WriteHeader(http.StatusNotFound)
	}))
	defer mockServer.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

	// –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –Ω–æ –Ω–∞–ø—Ä–∞–≤–∏–º –µ–≥–æ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
	cfg := &config.Config{
		AllureBaseURL:   mockServer.URL,
		AllureAPIURL:    "/api/",
		AllureUserToken: "fake-token",
	}
	client := adapter.NewAllureClient(cfg)

	// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ `GetPDFDownloadLink`
	link := client.GetPDFDownloadLink("456")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
	expectedURL := fmt.Sprintf("%s/api/export/download/456", mockServer.URL)
	assert.Equal(t, expectedURL, link)
}

func TestDownloadPDFReport_RealClient(t *testing.T) {
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodPost && r.URL.Path == "/api/uaa/oauth/token" {
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Type", "application/json")
			_, _ = w.Write([]byte(`{"access_token": "mocked_token", "expires_in": 3600}`))
			return
		}

		if r.Method == http.MethodGet && strings.HasPrefix(r.URL.Path, "/api/export/download/") {
			if r.Header.Get("Authorization") != "Bearer mocked_token" {
				w.WriteHeader(http.StatusUnauthorized)
				return
			}
			w.WriteHeader(http.StatusOK)
			w.Header().Set("Content-Disposition", "attachment; filename=allure-report-456.pdf")
			w.Header().Set("Content-Type", "application/pdf")
			_, _ = w.Write([]byte("PDF content"))
			return
		}

		w.WriteHeader(http.StatusNotFound)
	}))
	defer mockServer.Close()

	cfg := &config.Config{
		AllureBaseURL:   mockServer.URL,
		AllureAPIURL:    "/api/",
		AllureUserToken: "fake-token",
	}
	client := adapter.NewAllureClient(cfg)

	data, filename, err := client.DownloadPDFReport(context.Background(), "456")

	assert.NoError(t, err)
	assert.Equal(t, "allure-report-456.pdf", filename) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞
	assert.Equal(t, "PDF content", string(data))
}
