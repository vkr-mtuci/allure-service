package test

import (
	"context"
	"errors"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/allure-service/config"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
)

// ‚úÖ **–¢–µ—Å—Ç —Å –º–æ–∫–æ–º**
func TestNewAllureClient_WithMock(t *testing.T) {
	cfg := &config.Config{
		AllureBaseURL:   "https://allure.example.com",
		AllureAPIURL:    "/api/",
		AllureUserToken: "test-token",
		AllureProjectID: "1661",
		TokenExpiry:     55 * time.Minute,
	}

	mockClient := new(MockAllureClient)
	client := adapter.NewAllureClient(cfg)

	// üî• **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è**
	assert.NotNil(t, client)

	// üî• **–ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å `Authenticate` —Å `context.TODO()`**
	mockClient.On("Authenticate", mock.Anything).Return(nil)

	// üî• **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ**
	assert.Equal(t, "https://allure.example.com", cfg.AllureBaseURL)
	assert.Equal(t, "/api/", cfg.AllureAPIURL)
	assert.Equal(t, "test-token", cfg.AllureUserToken)
	assert.Equal(t, "1661", cfg.AllureProjectID)

	// üî• **–ü–µ—Ä–µ–¥–∞–µ–º `context.TODO()` –≤–º–µ—Å—Ç–æ `nil`**
	err := mockClient.Authenticate(context.TODO())
	assert.NoError(t, err)
	mockClient.AssertExpectations(t)
}

// ‚úÖ **–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏**
func TestAuthenticate_RealClient(t *testing.T) {
	cfg := &config.Config{
		AllureBaseURL:   "https://allure.example.com",
		AllureAPIURL:    "/api/",
		AllureUserToken: "test-token",
		AllureProjectID: "1661",
		TokenExpiry:     55 * time.Minute,
	}

	client := adapter.NewAllureClient(cfg)

	// üî• **–ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é**
	err := client.Authenticate(context.TODO())

	// ‚ùó **–í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞–Ω–∏–∫–∏**
	assert.NotNil(t, client)
	assert.Error(t, err) // –¢–∞–∫ –∫–∞–∫ API Allure —Ä–µ–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞
func TestAuthenticate_RequestError(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Equal(t, "–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏", err.Error())

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –±—ã–ª**
	mockClient.AssertExpectations(t)
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
func TestAuthenticate_BadJSON(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤**
	mockClient.AssertExpectations(t)
}

// –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–µ
func TestAuthenticate_StatusCodeError(t *testing.T) {
	mockClient := new(MockAllureClient)

	// üî• **–ú–æ–∫–∞–µ–º –∫–æ–¥ 500**
	mockClient.On("Authenticate", mock.Anything).Return(errors.New("–æ—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å 500"))

	// üèÉ‚Äç‚ôÇÔ∏è **–í—ã–∑—ã–≤–∞–µ–º `Authenticate()`**
	err := mockClient.Authenticate(context.TODO())

	// ‚ùå **–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É**
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "–æ—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å 500")

	// üìå **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤**
	mockClient.AssertExpectations(t)
}
