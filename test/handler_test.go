package test

import (
	"errors"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
	"github.com/vkr-mtuci/allure-service/internal/handler"
)

// ‚úÖ –¢–µ—Å—Ç –¥–ª—è `GetNextLaunch`
func TestGetNextLaunchHandler(t *testing.T) {
	mockService := new(MockAllureService)
	app := fiber.New()
	h := handler.NewAllureHandler(mockService)
	app.Get("/next-launch", h.GetNextLaunch)

	// üõ† –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	mockLaunch := &adapter.Launch{
		ID:          123,
		Name:        "Test Run",
		CreatedDate: time.Now().UnixMilli(),
	}
	mockService.On("GetNextLaunch", mock.Anything).Return(mockLaunch, nil)

	// üèÉ‚Äç‚ôÇÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
	req := httptest.NewRequest(http.MethodGet, "/next-launch?after=2024-02-01T12:00:00Z", nil)
	resp, err := app.Test(req)
	assert.NoError(t, err)
	assert.Equal(t, http.StatusOK, resp.StatusCode)

	mockService.AssertExpectations(t) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –º–æ–∫–∞
}

// ‚úÖ –¢–µ—Å—Ç –¥–ª—è –æ—à–∏–±–∫–∏ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞)
func TestGetNextLaunchHandler_NotFound(t *testing.T) {
	mockService := new(MockAllureService)
	app := fiber.New()
	h := handler.NewAllureHandler(mockService)
	app.Get("/next-launch", h.GetNextLaunch)

	// üõ† –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø—É—Å–∫"
	mockService.On("GetNextLaunch", mock.Anything).Return(nil, errors.New("–Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø—É—Å–∫"))

	// üèÉ‚Äç‚ôÇÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
	req := httptest.NewRequest(http.MethodGet, "/next-launch?after=2024-02-01T12:00:00Z", nil)
	resp, err := app.Test(req)
	assert.NoError(t, err)
	assert.Equal(t, http.StatusInternalServerError, resp.StatusCode)

	mockService.AssertExpectations(t)
}

func TestGeneratePDFReportHandler_InvalidInput(t *testing.T) {
	app := fiber.New()
	mockService := new(MockAllureService)
	handler := handler.NewAllureHandler(mockService)
	app.Post("/export/pdf/:id", handler.GeneratePDFReport)

	// –û–∂–∏–¥–∞–µ–º –≤—ã–∑–æ–≤ `GeneratePDFReport` —Å `launchId=123` –∏ `name="Test"`
	mockService.On("GeneratePDFReport", int64(123), "Test").Return(nil, errors.New("invalid input"))

	// –¢–µ—Å—Ç —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º ID –≤ –ø—É—Ç–∏ –∏ —Ç–µ–ª–µ
	reqBody := `{"launchId": 123, "name": "Test"}`
	req := httptest.NewRequest("POST", "/export/pdf/456", strings.NewReader(reqBody))
	req.Header.Set("Content-Type", "application/json")

	resp, _ := app.Test(req)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 400 Bad Request
	assert.Equal(t, http.StatusBadRequest, resp.StatusCode)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
	mockService.AssertExpectations(t)
}

func TestDownloadPDFReport_StatusHandling(t *testing.T) {
	app := fiber.New()
	mockService := new(MockAllureService)
	handler := handler.NewAllureHandler(mockService)
	app.Get("/export/pdf/download/:id", handler.DownloadPDFReport)

	// –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ—Ç—á–µ—Ç–æ–º
	mockService.On("DownloadPDFReport", "999").Return(
		nil,
		"",
		errors.New("report not found"),
	)

	req := httptest.NewRequest("GET", "/export/pdf/download/999", nil)
	resp, _ := app.Test(req)
	assert.Equal(t, http.StatusInternalServerError, resp.StatusCode)
}

func TestGetNextLaunch_InvalidDateFormat(t *testing.T) {
	app := fiber.New()
	mockService := new(MockAllureService)
	handler := handler.NewAllureHandler(mockService)
	app.Get("/next-launch", handler.GetNextLaunch)

	// –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	req := httptest.NewRequest(http.MethodGet, "/next-launch?after=2024-02-01", nil)
	resp, _ := app.Test(req)
	assert.Equal(t, http.StatusBadRequest, resp.StatusCode)
}

func TestGetPDFDownloadLink_Handler(t *testing.T) {
	// –°–æ–∑–¥–∞—ë–º –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞
	mockService := new(MockAllureService)
	mockService.On("GetPDFDownloadLink", "456").Return("http://mocked.url/download/456")

	// –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Ä–æ—É—Ç–µ—Ä Fiber
	app := fiber.New()
	handler := handler.NewAllureHandler(mockService)
	app.Get("/export/download/:id", handler.GetPDFDownloadLink)

	// –í—ã–ø–æ–ª–Ω—è–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
	req := httptest.NewRequest("GET", "/export/download/456", nil)
	resp, err := app.Test(req)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
	assert.NoError(t, err)
	assert.Equal(t, http.StatusOK, resp.StatusCode)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, _ := io.ReadAll(resp.Body)
	expected := `{"download_link":"http://mocked.url/download/456"}`
	assert.JSONEq(t, expected, string(body))
}
