package test

import (
	"errors"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
	"github.com/vkr-mtuci/allure-service/internal/handler"
)

// ‚úÖ –¢–µ—Å—Ç –¥–ª—è `GetNextLaunch`
func TestGetNextLaunchHandler(t *testing.T) {
	mockService := new(MockAllureService)
	app := fiber.New()
	h := handler.NewAllureHandler(mockService)
	app.Get("/next-launch", h.GetNextLaunch)

	// üõ† –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	mockLaunch := &adapter.Launch{
		ID:          123,
		Name:        "Test Run",
		CreatedDate: time.Now().UnixMilli(),
	}
	mockService.On("GetNextLaunch", mock.Anything).Return(mockLaunch, nil)

	// üèÉ‚Äç‚ôÇÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
	req := httptest.NewRequest(http.MethodGet, "/next-launch?after=2024-02-01T12:00:00Z", nil)
	resp, err := app.Test(req)
	assert.NoError(t, err)
	assert.Equal(t, http.StatusOK, resp.StatusCode)

	mockService.AssertExpectations(t) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –º–æ–∫–∞
}

// ‚úÖ –¢–µ—Å—Ç –¥–ª—è –æ—à–∏–±–∫–∏ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞)
func TestGetNextLaunchHandler_NotFound(t *testing.T) {
	mockService := new(MockAllureService)
	app := fiber.New()
	h := handler.NewAllureHandler(mockService)
	app.Get("/next-launch", h.GetNextLaunch)

	// üõ† –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø—É—Å–∫"
	mockService.On("GetNextLaunch", mock.Anything).Return(nil, errors.New("–Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø—É—Å–∫"))

	// üèÉ‚Äç‚ôÇÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
	req := httptest.NewRequest(http.MethodGet, "/next-launch?after=2024-02-01T12:00:00Z", nil)
	resp, err := app.Test(req)
	assert.NoError(t, err)
	assert.Equal(t, http.StatusInternalServerError, resp.StatusCode)

	mockService.AssertExpectations(t)
}
