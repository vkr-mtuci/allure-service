package adapter

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"sync"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/allure-service/config"
)

// AllureClientInterface - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–ª–∏–µ–Ω—Ç–∞ Allure API
type AllureClientInterface interface {
	Authenticate(ctx context.Context) error
	GetLaunches(ctx context.Context) ([]Launch, error)
	GeneratePDFReport(ctx context.Context, launchID int64, launchName string) (*PDFReport, error)
	GetPDFDownloadLink(reportID string) string
	DownloadPDFReport(ctx context.Context, reportID string) ([]byte, string, error)
}

// AllureClient - –∫–ª–∏–µ–Ω—Ç API Allure
type AllureClient struct {
	client       *resty.Client
	baseURL      string
	apiURL       string
	token        string
	tokenExpires time.Time
	projectID    string
	cfg          *config.Config
	mu           sync.Mutex // –î–æ–±–∞–≤–ª—è–µ–º –º—å—é—Ç–µ–∫—Å
}

// NewAllureClient - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ API Allure
func NewAllureClient(cfg *config.Config) *AllureClient {
	client := resty.New().
		SetBaseURL(cfg.AllureBaseURL).
		SetTimeout(10*time.Second).
		SetHeader("Accept", "application/json")

	return &AllureClient{
		client:    client,
		baseURL:   cfg.AllureBaseURL,
		apiURL:    cfg.AllureAPIURL,
		token:     cfg.AllureUserToken,
		projectID: cfg.AllureProjectID,
		cfg:       cfg,
	}
}

// Authenticate - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
func (a *AllureClient) Authenticate(ctx context.Context) error {
	a.mu.Lock()
	defer a.mu.Unlock()

	// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	if time.Until(a.tokenExpires) > 5*time.Minute {
		return nil
	}

	log.Info().Msg("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Allure API...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	resp, err := a.client.R().
		SetContext(ctx).
		SetFormData(map[string]string{
			"grant_type": "apitoken",
			"scope":      "openid",
			"token":      a.cfg.AllureUserToken,
		}).
		Post(a.baseURL + "/api/uaa/oauth/token")

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Allure API
	log.Info().Msgf("üì® –û—Ç–≤–µ—Ç –æ—Ç Allure API (—Ç–æ–∫–µ–Ω): —Å—Ç–∞—Ç—É—Å %d, —Ç–µ–ª–æ: %s", resp.StatusCode(), resp.String())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode() != http.StatusOK {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
	}

	// –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
	var authResp struct {
		AccessToken string `json:"access_token"`
		ExpiresIn   int    `json:"expires_in"`
	}
	if err := json.Unmarshal(resp.Body(), &authResp); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞")
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	a.token = authResp.AccessToken
	a.tokenExpires = time.Now().Add(time.Duration(authResp.ExpiresIn) * time.Second)
	log.Info().Msg("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
	return nil
}

// GetLaunches - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—Å–∫–æ–≤
func (a *AllureClient) GetLaunches(ctx context.Context) ([]Launch, error) {
	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω
	if err := a.Authenticate(ctx); err != nil {
		return nil, err
	}

	url := fmt.Sprintf("%s%slaunch?projectId=%s&page=0&size=100", a.baseURL, a.apiURL, a.projectID)

	resp, err := a.client.R().
		SetContext(ctx).
		SetAuthToken(a.token).
		Get(url)

	if err != nil {
		return nil, err
	}

	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ Allure API: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
	}

	var launchesResponse struct {
		Content []Launch `json:"content"`
	}

	if err := json.Unmarshal(resp.Body(), &launchesResponse); err != nil {
		return nil, err
	}

	return launchesResponse.Content, nil
}

// GeneratePDFReport - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞ –≤ Allure
func (a *AllureClient) GeneratePDFReport(ctx context.Context, launchID int64, launchName string) (*PDFReport, error) {
	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
	err := a.Authenticate(ctx)
	if err != nil {
		return nil, fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF: %w", err)
	}

	url := fmt.Sprintf("%s%sexport/launch/pdf", a.baseURL, a.apiURL)
	log.Info().Msgf("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF: URL=%s, LaunchID=%d", url, launchID)

	// –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	requestBody := map[string]interface{}{
		"launchId":        launchID,
		"name":            launchName,
		"withPageNumbers": true,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := a.client.R().
		SetContext(ctx).
		SetHeader("Authorization", "Bearer "+a.token). // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º Bearer-—Ç–æ–∫–µ–Ω
		SetHeader("Content-Type", "application/json").
		SetBody(requestBody).
		Post(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF")
		return nil, err
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Allure API
	log.Info().Msgf("üì® –û—Ç–≤–µ—Ç –æ—Ç Allure API: —Å—Ç–∞—Ç—É—Å %d, —Ç–µ–ª–æ: %s", resp.StatusCode(), resp.String())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
	}

	// –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
	var report PDFReport
	if err := json.Unmarshal(resp.Body(), &report); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF")
		return nil, err
	}

	log.Info().Msgf("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF: ID=%d, –∏–º—è=%s", report.ID, report.Name)
	return &report, nil
}

// GetPDFDownloadLink - –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞
func (a *AllureClient) GetPDFDownloadLink(reportID string) string {
	return fmt.Sprintf("%s%sexport/download/%s", a.baseURL, a.apiURL, reportID)
}

// DownloadPDFReport - –∑–∞–≥—Ä—É–∂–∞–µ—Ç PDF-–æ—Ç—á–µ—Ç —Å Allure API
func (a *AllureClient) DownloadPDFReport(ctx context.Context, reportID string) ([]byte, string, error) {
	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
	if err := a.Authenticate(ctx); err != nil {
		return nil, "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º PDF: %w", err)
	}

	url := fmt.Sprintf("%s%sexport/download/%s", a.baseURL, a.apiURL, reportID)
	log.Info().Msgf("üì° –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF: %s", url)

	resp, err := a.client.R().
		SetContext(ctx).
		SetHeader("Authorization", "Bearer "+a.token).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF")
		return nil, "", err
	}

	if resp.StatusCode() != http.StatusOK {
		log.Warn().Msgf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
		return nil, "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("allure-report-%s.pdf", reportID)

	return resp.Body(), fileName, nil
}
