package handler

import (
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/allure-service/internal/service"
)

// AllureHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Allure
type AllureHandler struct {
	service service.AllureServiceInterface
}

// NewAllureHandler - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func NewAllureHandler(service service.AllureServiceInterface) *AllureHandler {
	return &AllureHandler{service: service}
}

// GetNextLaunch - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
func (h *AllureHandler) GetNextLaunch(c *fiber.Ctx) error {
	dateParam := c.Query("after")
	if dateParam == "" {
		log.Warn().Msg("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä 'after' –Ω–µ —É–∫–∞–∑–∞–Ω")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä 'after' (–≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC3339)",
		})
	}

	// üõ† –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª –Ω–∞ `+`, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ cURL –µ–≥–æ –∑–∞–º–µ–Ω–∏–ª–∏
	correctedDate := strings.ReplaceAll(dateParam, " ", "+")

	afterDate, err := time.Parse(time.RFC3339, correctedDate)
	if err != nil {
		log.Error().Err(err).Msgf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: %s", correctedDate)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RFC3339 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-30T22:00:38.625+03:00)",
		})
	}

	nextLaunch, err := h.service.GetNextLaunch(afterDate)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": err.Error(),
		})
	}

	return c.JSON(nextLaunch)
}

// GeneratePDFReport - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞
func (h *AllureHandler) GeneratePDFReport(c *fiber.Ctx) error {
	var request struct {
		LaunchID        int64  `json:"launchId"`
		Name            string `json:"name"`
		WithPageNumbers bool   `json:"withPageNumbers"`
	}

	// –†–∞—Å–ø–∞—Ä—Å–∏–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.BodyParser(&request); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON",
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if request.LaunchID == 0 {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω LaunchID")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å ID –∑–∞–ø—É—Å–∫–∞",
		})
	}

	if request.Name == "" {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∑–∞–ø—É—Å–∫–∞")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –∑–∞–ø—É—Å–∫–∞",
		})
	}

	// –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
	report, err := h.service.GeneratePDFReport(request.LaunchID, request.Name)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á–µ—Ç–∞")

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
		if strings.Contains(err.Error(), "invalid input") {
			return c.Status(http.StatusBadRequest).JSON(fiber.Map{
				"error": err.Error(),
			})
		}

		// –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - 500
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
		})
	}

	// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º report.ID (int64) –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º GetPDFDownloadLink
	reportIDStr := strconv.FormatInt(report.ID, 10)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å ID –æ—Ç—á–µ—Ç–∞
	return c.JSON(fiber.Map{
		"report_id":     report.ID,
		"download_link": h.service.GetPDFDownloadLink(reportIDStr), // ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞
	})
}

// GetPDFDownloadLink - –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞
func (h *AllureHandler) GetPDFDownloadLink(c *fiber.Ctx) error {
	reportID := c.Params("id")
	if reportID == "" {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω reportID")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å ID –æ—Ç—á–µ—Ç–∞",
		})
	}

	downloadLink := h.service.GetPDFDownloadLink(reportID)

	return c.JSON(fiber.Map{"download_link": downloadLink})
}

// DownloadPDFReport - —Å–∫–∞—á–∏–≤–∞–µ—Ç PDF-–æ—Ç—á–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç
func (h *AllureHandler) DownloadPDFReport(c *fiber.Ctx) error {
	reportID := c.Params("id")
	if reportID == "" {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω reportID")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å ID –æ—Ç—á–µ—Ç–∞",
		})
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF
	fileData, fileName, err := h.service.DownloadPDFReport(reportID)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF")
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF-–æ—Ç—á–µ—Ç–∞",
		})
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF-—Ñ–∞–π–ª –∫–∞–∫ –ø–æ—Ç–æ–∫
	c.Set("Content-Disposition", "attachment; filename="+fileName)
	c.Set("Content-Type", "application/pdf")
	return c.Send(fileData)
}
