package main

import (
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/rs/zerolog"

	"github.com/vkr-mtuci/allure-service/config"
	"github.com/vkr-mtuci/allure-service/internal/adapter"
	"github.com/vkr-mtuci/allure-service/internal/handler"
	"github.com/vkr-mtuci/allure-service/internal/service"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	output := zerolog.ConsoleWriter{Out: os.Stdout}
	logger := zerolog.New(output).With().Timestamp().Logger()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := config.LoadConfig()
	logger.Info().Msg("üì¢ –ó–∞–ø—É—Å–∫ Allure-—Å–µ—Ä–≤–∏—Å–∞...")

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
	allureClient := adapter.NewAllureClient(cfg)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
	allureService := service.NewAllureService(allureClient)

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	allureHandler := handler.NewAllureHandler(allureService)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fiber
	app := fiber.New()

	// –í–∫–ª—é—á–µ–Ω–∏–µ CORS
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowMethods: "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders: "Origin, Content-Type, Accept",
	}))

	// –ú–∞—Ä—à—Ä—É—Ç—ã API
	app.Get("/", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{"message": "‚úÖ Allure-service is running"})
	})

	app.Get("/next-launch", allureHandler.GetNextLaunch)
	app.Post("/export/pdf/:id", allureHandler.GeneratePDFReport)
	app.Get("/export/download/:id", allureHandler.GetPDFDownloadLink)
	app.Get("/export/pdf/download/:id", allureHandler.DownloadPDFReport)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	logger.Info().Msgf("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.ServerPort)
	err := app.Listen(":" + cfg.ServerPort)
	if err != nil {
		logger.Fatal().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
	}
}
